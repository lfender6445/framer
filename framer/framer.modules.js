require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"flipCard":[function(require,module,exports){
exports.flipCard = function(front, back, perspective, flipCurve, resultContainer) {
  var container, perspectiveLayer;
  perspectiveLayer = new Layer({
    width: front.width,
    height: front.height,
    x: front.x,
    y: front.y,
    backgroundColor: "transparent",
    superLayer: resultContainer
  });
  resultContainer.perspective = perspective;
  container = new Layer({
    width: front.width,
    height: front.height,
    backgroundColor: "transparent",
    superLayer: perspectiveLayer
  });
  back.superLayer = container;
  front.superLayer = container;
  front.x = 0;
  front.y = 0;
  back.x = 0;
  back.y = 0;
  front.states.add({
    front: {
      opacity: 1
    },
    back: {
      opacity: 0
    }
  });
  front.states.animationOptions = {
    curve: flipCurve
  };
  front.states.switchInstant("front");
  back.states.add({
    front: {
      opacity: 0
    },
    back: {
      opacity: 1
    }
  });
  back.states.animationOptions = {
    curve: flipCurve
  };
  container.states.add({
    front: {
      rotationY: 0
    },
    back: {
      rotationY: 180
    }
  });
  container.states.animationOptions = {
    curve: flipCurve
  };
  container.states.switchInstant("front");
  return container.on(Events.Click, function() {
    console.log('trigger flip');
    this.states.next(["back", "front"]);
    return front.states.next(["back", "front"]);
  });
};


},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];


},{}],"slide":[function(require,module,exports){
exports.slider = function() {
  var addBars, bars, createSlider, drawGraph, drawPrices, extractCount, extractPrice, graph, max, priceBar, priceRange, slider, sliderArea, sliderBar, sliderMax, sliderMin, state, updateState, widget;
  console.log('creating alans slider');
  widget = new Layer({
    height: 650,
    width: 150
  });
  graph = new Layer({
    parent: widget,
    width: 506,
    height: 400,
    x: 122,
    y: 49
  });
  slider = new Layer({
    parent: widget,
    height: 98,
    width: 750,
    y: 465
  });
  sliderArea = new Layer({
    parent: slider,
    height: 60,
    width: 545,
    x: 103,
    y: 17
  });
  sliderBar = new Layer({
    parent: sliderArea,
    height: 13,
    width: 545,
    y: 25,
    backgroundColor: "rgba(48,31,255,0.8)"
  });
  priceBar = new Layer({
    width: 545,
    height: 54,
    y: 580,
    x: 103
  });
  createSlider = function(x) {
    slider = new Layer({
      parent: sliderArea,
      height: 60,
      width: 32,
      x: x,
      backgroundColor: "rgba(55,152,197,0.5)"
    });
    slider.draggable.vertical = false;
    slider.draggable.constraints = {
      width: 545
    };
    slider.draggable.overdrag = false;
    slider.draggable.momentum = false;
    return slider;
  };
  addBars = function(ranges) {
    var bars, i, j, layer, len, n, width;
    width = Math.floor((graph.width - 5) / ranges.length);
    bars = [];
    for (j = 0, len = ranges.length; j < len; j++) {
      i = ranges[j];
      n = ranges.indexOf(i);
      layer = new Layer({
        width: 40,
        height: 0,
        x: 5 + width * n,
        y: 5,
        backgroundColor: "rgba(89,233,5,100)"
      });
      bars.push(layer);
      graph.addChild(layer);
    }
    graph.rotationX = 180;
    return bars;
  };
  drawPrices = function(ranges) {
    var i, j, len, n, price, priceLayer, prices, results, width;
    width = Math.floor((priceBar.width - 5) / ranges.length);
    prices = ranges.map(extractPrice);
    results = [];
    for (j = 0, len = ranges.length; j < len; j++) {
      i = ranges[j];
      n = ranges.indexOf(i);
      price = prices[n];
      priceLayer = new Layer({
        height: 15,
        width: 35,
        x: 5 + width * n,
        y: 5
      });
      if (price >= 1000) {
        priceLayer.html = "" + (price / 1000) + "k";
      } else {
        priceLayer.html = price;
      }
      results.push(priceBar.addChild(priceLayer));
    }
    return results;
  };
  max = function(numbers) {
    return numbers.reduce(function(largest, price) {
      if (price > largest) {
        return price;
      } else {
        return largest;
      }
    });
  };
  extractPrice = function(step, i) {
    return step[0];
  };
  extractCount = function(step, i) {
    return step[1];
  };
  drawGraph = function(range, bars, options) {
    var color, count, i, j, len, maxCount, maxHeight, n, price, results;
    maxHeight = graph.height - 10;
    maxCount = max(range.map(extractCount));
    results = [];
    for (j = 0, len = range.length; j < len; j++) {
      i = range[j];
      n = range.indexOf(i);
      price = i[0];
      count = i[1];
      color = options["activeColor"];
      if (n < options["goneBefore"] || n > options["goneAfter"]) {
        count = 0;
      } else if (n < options["disabledBefore"] || n > options["disabledAfter"]) {
        color = options["disabledColor"];
      }
      bars[n].height = count / maxCount * maxHeight;
      results.push(bars[n].backgroundColor = color);
    }
    return results;
  };
  updateState = function(slider, property) {
    state[property] = Math.round(slider.point["x"] / 55);
    return drawGraph(priceRange, bars, state);
  };
  priceRange = [[500, 4], [700, 8], [900, 12], [1100, 15], [1300, 20], [1500, 25], [2000, 28], [3000, 20], [4000, 4], [5000, 1]];
  sliderMin = createSlider(0);
  sliderMax = createSlider(513);
  state = {
    activeColor: "rgba(89,233,5,100)",
    disabledColor: "rgba(233,289,5,100)",
    disabledBefore: 0,
    disabledAfter: 9,
    goneBefore: 0,
    goneAfter: 9
  };
  drawPrices(priceRange);
  bars = addBars(priceRange);
  drawGraph(priceRange, bars, state);
  sliderMin.onDrag(function() {
    return updateState(this, "disabledBefore");
  });
  sliderMin.onDragEnd(function() {
    return updateState(this, "goneBefore");
  });
  sliderMax.onDrag(function() {
    return updateState(this, "disabledAfter");
  });
  sliderMax.onDragEnd(function() {
    return updateState(this, "goneAfter");
  });
  return widget;
};


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
